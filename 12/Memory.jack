// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */

class Memory {

    static int heapStart, heapEnd, heapLength;

    static LinkedList freeList;

    // Initializes the class.
    function void init() {

      let heapStart = 2048;
      let heapEnd   = 16483;
      let heapLength = (heapEnd - heapStart);
      let freeList = LinkedList.new(0,0,null);
      let freeList = LinkedList.new(heapLength,heapStart,freeList);


      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      var Array memory;
      let memory = 0;
      return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      var Array memory;
      let memory = 0;
      let memory[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
      var Array returnArray;
      let returnArray =  freeList.transverseAlloc(); // function will return the array of the block
      return returnArray;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var int segmentPointer;
      var int segmentLength;
      let segmentPointer = o - 1;
      let segmentLength = o[-1];

      let freeList = LinkedList.new(segmentLength,segmentPointer, freeList);


      return;
    }
}
