// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    And(a=instruction[15]  ,b=instruction[15]  ,out=i );
    And(a=instruction[14]  ,b=instruction[14]  ,out=x1 );
    And(a=instruction[13]  ,b=instruction[13]  ,out=x2 );
    And(a=instruction[12]  ,b=instruction[12]  ,out=a );
    And(a=instruction[11]  ,b=instruction[11]  ,out=c1 );
    And(a=instruction[10]  ,b=instruction[10]  ,out=c2 );
    And(a=instruction[9]   ,b=instruction[9]   ,out=c3 );
    And(a=instruction[8]   ,b=instruction[8]   ,out=c4 );
    And(a=instruction[7]   ,b=instruction[7]   ,out=c5 );
    And(a=instruction[6]   ,b=instruction[6]   ,out=c6 );
    And(a=instruction[5]   ,b=instruction[5]   ,out=d1 );
    And(a=instruction[4]   ,b=instruction[4]   ,out=d2 );
    And(a=instruction[3]   ,b=instruction[3]   ,out=d3 );
    And(a=instruction[2]   ,b=instruction[2]   ,out=j1 );
    And(a=instruction[1]   ,b=instruction[1]   ,out=j2 );
    And(a=instruction[0]   ,b=instruction[0]   ,out=j3 );
    
    
    
    Mux16(a=instruction ,b=outMint ,sel=i ,out=mux1 ); //mux instruction
    
    Not(in=i ,out=noti ); 
    Or(a=noti,b=d1,out=cfora);
    ARegister(in=mux1 ,load=cfora ,out=A ); //A register
    
    And(a=i,b=a,out=selAM);
    Mux16(a=A ,b=inM ,sel=selAM ,out=muxAM ); //mux A/M
    
    And(a=i,b=d2,out=loadD);
    DRegister(in=outMint ,load=loadD ,out=D ); //D
    
    And(a=i,b=c1,out=c1alu);
    And(a=i,b=c2,out=c2alu);
    And(a=i,b=c3,out=c3alu);
    And(a=i,b=c4,out=c4alu);
    And(a=i,b=c5,out=c5alu);
    And(a=i,b=c6,out=c6alu);
    ALU(x=D ,y=muxAM ,zx=c1alu ,nx=c2alu ,zy=c3alu ,ny=c4alu ,f=c5alu ,no=c6alu ,out=outM,out=outMint ,zr=zr ,ng=ng);
    
    
    And(a=i,b=d3, out=writeM);
    And16(a=A,b=A,out[0..14]=addressM); // writeM output and AddressM output
    
    Not(in=ng,out=nng);
    Not(in=zr,out=nzr);
    And(a=nzr,b=nng,out=nng1);
    And(a=j1,b=ng,out=j1out);
    And(a=j2,b=zr,out=j2out);
    And(a=j3,b=nng1,out=j3out);
    Or(a=j3out,b=j2out,out=outj23);
    Or(a=j1out,b=outj23,out=loadPC); //Or to get loadPC
    And(a=i,b=loadPC,out=loadPCC);
    
    PC(in=A ,load=loadPCC ,inc=true ,reset=reset ,out[0..14]=pc );  //PC 
    
    
    
       
}
